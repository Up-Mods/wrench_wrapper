plugins {
	id 'java'
	id 'maven-publish'
	alias libs.plugins.fabric.loom
	alias libs.plugins.shadow
}

def ENV = System.getenv()

version = ENV.TAG ?: "0.0.0-development${ENV.BUILD_NUMBER ? "-build.${ENV.BUILD_NUMBER}" : ''}"
group = project.maven_group

// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
def javaVersion = 17

repositories {
	maven {
		url = "https://maven.quiltmc.org/repository/release/"
	}
}

loom {
	mods {
		"wrench_wrapper" {
			sourceSet("main")
		}
	}
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings loom.officialMojangMappings()
	modCompileOnly libs.fabric.loader

	shadow(libs.bundles.quilt.config) {
		transitive = false
	}
}

processResources {
	filteringCharset 'UTF-8'
	inputs.properties 'version': version

	filesMatching(['fabric.mod.json', 'quilt.mod.json', 'META-INF/neoforge.mods.toml', 'META-INF/mods.toml']) {
		expand 'version': version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release.set(javaVersion)
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()

	toolchain {
		languageVersion.set(JavaLanguageVersion.of(javaVersion))
	}
}

shadowJar {
	from('LICENSE.md') {
		rename { "LICENSE_${base.archivesName.get()}.md" }
	}

	archiveClassifier = null
	configurations = [ project.configurations.shadow ]

	relocate 'com.electronwill', 'org.quiltmc.loader.impl.lib.electronwill'
}

tasks.named('build').configure {
	dependsOn tasks.named('shadowJar')
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		if (ENV.MAVEN_UPLOAD_URL) {
			maven {
				url = ENV.MAVEN_UPLOAD_URL
				credentials {
					username = ENV.MAVEN_UPLOAD_USERNAME
					password = ENV.MAVEN_UPLOAD_PASSWORD
				}
			}
		}
	}
}
