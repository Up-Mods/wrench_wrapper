plugins {
	id 'java'
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	alias libs.plugins.shadow
}

def ENV = System.getenv()
def now = new Date()

version = ENV.TAG ?: "development-${now.format('YY.MMdd.HHmm', TimeZone.getTimeZone('UTC'))}+${libs.versions.minecraft.get()}${(!ENV.TAG && ENV.BUILD_NUMBER) ? "-build.${ENV.BUILD_NUMBER}" : ''}"
group = project.maven_group

base {
	archivesName.set("${rootProject.name}-fabric")
}

// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
def javaVersion = 17

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	mods {
		"wrench_wrapper" {
			sourceSet("main")
		}
	}
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	modImplementation libs.quilt.loader

	shadow(libs.bundles.quilt.config) {
		transitive = false
	}
}

processResources {
	inputs.properties 'version': version

	filesMatching(['fabric.mod.json', 'quilt.mod.json']) {
		expand 'version': version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release.set(javaVersion)
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()

	toolchain {
		languageVersion.set(JavaLanguageVersion.of(javaVersion))
	}
}

shadowJar {
	from('LICENSE.md') {
		rename { "LICENSE_${base.archivesName.get()}.md" }
	}

	archiveClassifier = null
	configurations = [ project.configurations.shadow ]
}

tasks.named('build').configure {
	dependsOn tasks.named('shadowJar')
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		if (ENV.MAVEN_UPLOAD_URL) {
			maven {
				url = ENV.MAVEN_UPLOAD_URL
				credentials {
					username = ENV.MAVEN_UPLOAD_USERNAME
					password = ENV.MAVEN_UPLOAD_PASSWORD
				}
			}
		}
	}
}
